# Grammar for ECMArkup grammar descriptions

var token CHR;        # <NL>
var token EQ;         # ::
var token MATCH_REF;  # $0
var token NL;         # (actual newline character)
var token NT;         # IdentifierName
var token NTALT;      # |LineTerminator|
var token NTCALL;     # Expression (when followed by `[`)
var token PRODID;     # #comment
var token PROSE;      # > any text following a greater than sign
var token T;          # `var`
var token WPROSE;     # [> any text after greater than sign, wrapped in brackets]

token But = "but";
token Empty = "empty";
token Here = "here";
token Lookahead = "lookahead";
token No = "no";
token Not = "not";
token Of = "of";
token One = "one";
token Or = "or";
token Through = "through";
token Some = "Some";
token None = "None";
token Arrow = "=>";
token Comma = ",";
token OpenBracket = "[";
token CloseBracket = "]";
token QuestionMark = "?";
token Tilde = "~";
token PlusSign = "+";
token Equals = "==";
token IsNotEqualTo = "!=";
token IsNotIn = "<!";
token OpenBrace = "{";
token CloseBrace = "}";
token OpenParen = "(";
token CloseParen = ")";


goal nt grammar {
    nt_def_or_blank_line;
    grammar nt_def_or_blank_line => concat;
}

nt nt_def_or_blank_line {
    NL => blank_line;
    nt_def => nt_def_to_list;
}

nt nt_def {
    nt_lhs EQ NL rhs_lines NL => nt_def;
    nt_lhs EQ "one" "of" NL t_list_lines NL => nt_def_one_of;
}

nt nt_lhs {
    NT => nt_lhs_no_params;
    NTCALL "[" params "]" => nt_lhs_with_params;
}

nt params {
    param => single;
    params "," param => append_ignoring_separator;
}

nt param {
    NT;
}

nt t_list_lines {
    t_list_line;
    t_list_lines t_list_line => concat;
}

nt t_list_line {
    terminal_seq NL => t_list_line;
}

nt terminal_seq {
    terminal => single;
    terminal_seq terminal => append;
}

nt terminal {
    T => terminal;
    CHR => chr;
}

nt rhs_lines {
    rhs_line => single;
    rhs_lines rhs_line => append;
}

nt rhs_line {
    ifdef? rhs action? PRODID? NL => rhs_line;
    PROSE NL => rhs_line_prose;
}

nt rhs {
    symbols;
    "[" "empty" "]" => empty_rhs;
}

nt action {
   "=>" expr => action;
}

nt expr {
    MATCH_REF => expr_match_ref;
    NT "(" expr_args? ")" => expr_call;
    "Some" "(" expr ")" => expr_some;
    "None" => expr_none;
}

nt expr_args {
    expr => single;
    args "," expr => append_ignoring_separator;
}

nt ifdef {
   "[" definite_sigil NT "]" => ifdef;
}

nt symbols {
    symbol => single;
    symbols symbol => append;
}

nt symbol {
    terminal;
    nonterminal;
    nonterminal "?" => optional;
    nonterminal "but" "not" exclusion => but_not;
    nonterminal "but" "not" "one" "of" exclusion_list => but_not_one_of;
    "[" "lookahead" lookahead_assertion "]" => lookahead;
    no_line_terminator_here;
    WPROSE;
}

nt no_line_terminator_here {
    "[" "no" line_terminator "here" "]" => no_line_terminator_here;
}

nt nonterminal {
    NT => nonterminal;
    NTCALL "[" args "]" => nonterminal_apply;
}

nt args {
    arg => single;
    args "," arg => append_ignoring_separator;
}

nt arg {
    sigil NT => arg_expr;
}

nt sigil {
    definite_sigil;
    "?";
}

nt definite_sigil {
    "~" => sigil_false;
    "+" => sigil_true;
}

nt exclusion_list {
    exclusion => single;
    exclusion_list "or" exclusion => append_ignoring_separator;
}

nt exclusion {
    terminal => exclusion_terminal;
    nonterminal => exclusion_nonterminal;
    CHR "through" CHR => exclusion_chr_range;
}

nt lookahead_assertion {
    "==" terminal => la_eq;
    "!=" terminal => la_ne;
    "<!" NT => la_not_in_nonterminal;
    "<!" "{" lookahead_exclusions "}" => la_not_in_set;
}

nt lookahead_exclusions {
    lookahead_exclusion => single;
    lookahead_exclusions "," lookahead_exclusion => append_ignoring_separator;
}

nt lookahead_exclusion {
    lookahead_exclusion_element => single;
    lookahead_exclusion lookahead_exclusion_element => append;
}

nt lookahead_exclusion_element {
    terminal;
    no_line_terminator_here;
}

nt line_terminator {
    NT;
    NTALT;
}
